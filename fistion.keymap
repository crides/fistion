/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";
        combo_12 { timeout-ms = <75>; key-positions = <1 2>; bindings = <&kp L>; };
        combo_13 { timeout-ms = <75>; key-positions = <1 3>; bindings = <&kp D>; };
        combo_14 { timeout-ms = <75>; key-positions = <1 4>; bindings = <&kp X>; };
        combo_16 { timeout-ms = <75>; key-positions = <1 6>; bindings = <&kp G>; };
        combo_17 { timeout-ms = <75>; key-positions = <1 7>; bindings = <&kp V>; };
        combo_18 { timeout-ms = <75>; key-positions = <1 8>; bindings = <&kp Y>; };
        combo_19 { timeout-ms = <75>; key-positions = <1 9>; bindings = <&kp STAR>; };
        combo_23 { timeout-ms = <75>; key-positions = <2 3>; bindings = <&kp F>; };
        combo_24 { timeout-ms = <75>; key-positions = <2 4>; bindings = <&kp J>; };
        combo_26 { timeout-ms = <75>; key-positions = <2 6>; bindings = <&kp C>; };
        combo_27 { timeout-ms = <75>; key-positions = <2 7>; bindings = <&kp M>; };
        combo_28 { timeout-ms = <75>; key-positions = <2 8>; bindings = <&kp B>; };
        combo_29 { timeout-ms = <75>; key-positions = <2 9>; bindings = <&kp Z>; };
        combo_34 { timeout-ms = <75>; key-positions = <3 4>; bindings = <&kp EXCL>; };
        combo_36 { timeout-ms = <75>; key-positions = <3 6>; bindings = <&kp W>; };
        combo_37 { timeout-ms = <75>; key-positions = <3 7>; bindings = <&kp STAR>; };
        combo_38 { timeout-ms = <75>; key-positions = <3 8>; bindings = <&kp COMMA>; };
        combo_39 { timeout-ms = <75>; key-positions = <3 9>; bindings = <&kp STAR>; };
        combo_46 { timeout-ms = <75>; key-positions = <4 6>; bindings = <&kp STAR>; };
        combo_47 { timeout-ms = <75>; key-positions = <4 7>; bindings = <&kp STAR>; };
        combo_48 { timeout-ms = <75>; key-positions = <4 8>; bindings = <&kp STAR>; };
        combo_49 { timeout-ms = <75>; key-positions = <4 9>; bindings = <&kp DOT>; };
        combo_67 { timeout-ms = <75>; key-positions = <6 7>; bindings = <&kp S>; };
        combo_68 { timeout-ms = <75>; key-positions = <6 8>; bindings = <&kp U>; };
        combo_69 { timeout-ms = <75>; key-positions = <6 9>; bindings = <&kp K>; };
        combo_78 { timeout-ms = <75>; key-positions = <7 8>; bindings = <&kp P>; };
        combo_79 { timeout-ms = <75>; key-positions = <7 9>; bindings = <&kp Q>; };
        combo_89 { timeout-ms = <75>; key-positions = <8 9>; bindings = <&kp QMARK>; };

        combo_05 { timeout-ms = <75>; key-positions = <0 5>; bindings = <&sk LALT>; };
    };
    behaviors {
        ssteno1 { label = "ssteno1"; compatible = "zmk,behavior-serial-steno";
            key = "ls"; value = "list"; };
        ssteno2 { label = "ssteno2"; compatible = "zmk,behavior-serial-steno";
            key = "iv"; value = "I have"; };
        ssteno3 { label = "ssteno3"; compatible = "zmk,behavior-serial-steno";
            key = "dn"; value = "done"; };
        ssteno4 { label = "ssteno4"; compatible = "zmk,behavior-serial-steno";
            key = "lk"; value = "look"; };
        ssteno5 { label = "ssteno5"; compatible = "zmk,behavior-serial-steno";
            key = "j"; value = "just"; };
    };
    keymap0: keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &sk LCTL &kp E &kp N &kp I &kp H
                &sk LGUI &kp O &kp T &kp A &kp R
                &mt LSFT SPC &lt 1 BSPC &sl 2 &kp RET
                >;
        };
        upper_layer {
            bindings = <
                &kp NUM_0 &kp NUM_1 &kp NUM_2 &kp NUM_3 &kp NUM_4
                &kp NUM_5 &kp NUM_6 &kp NUM_7 &kp NUM_8 &kp NUM_9
                &trans &trans &trans &trans
                >;
        };
        lower_layer {
            bindings = <
                &bt BT_CLR &kp EXCL &kp AT &kp HASH &kp DOLLAR
                &out OUT_TOG &kp CARET &kp AMPS &kp LPAR &kp RPAR
                &trans &trans &trans &trans
                >;
        };
    };
};
